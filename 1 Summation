To analyze the algorithm's runtime, we examine its nested loops. The outer loop iterates n times, and for each iteration, the inner loop also runs n times, performing a constant time operation. The total operations (T) can be expressed as the sum of the innermost loop's operations, denoted as c (a constant):

\[ T = \sum_{i=1}^{n} \sum_{j=1}^{n} c \]

Simplifying, we combine the double summation:

\[ T = c \sum_{i=1}^{n} \sum_{j=1}^{n} 1 \]

Since the inner sum is constant (1), it simplifies to:

\[ T = c \sum_{i=1}^{n} n \]

Evaluating the summation:

\[ T = c \cdot n \sum_{i=1}^{n} 1 \]

As the sum of 1 repeated n times is n:

\[ T = c \cdot n \cdot n \]

Simplified:

\[ T = c \cdot n^2 \]

Thus, the algorithm has a quadratic time complexity of \(O(n^2)\).
